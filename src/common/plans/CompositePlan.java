package common.plans;

import java.util.BitSet;

/**
 * Represents a plan joining the result of
 * two other plans.
 * 
 * @author immanueltrummer
 *
 */
public class CompositePlan extends ProbePlan {
	/**
	 * This plans joins results generated by those two plans.
	 */
	public final ProbePlan leftPlan, rightPlan; 
	/**
	 * Initializes a plan joining the results of two
	 * other plans.
	 * 
	 * @param leftPlan	plan generating left join input
	 * @param rightPlan	plan generating right join input
	 * @param cost		plan execution cost
	 */
	public CompositePlan(ProbePlan leftPlan, 
			ProbePlan rightPlan, double cost) {
		super(joinRel(leftPlan, rightPlan), cost, 
				leftPlan.nrColumns + rightPlan.nrColumns);
		this.leftPlan = leftPlan;
		this.rightPlan = rightPlan;
	}
	/**
	 * Returns the relation resulting from a join
	 * of the results of the two given plans.
	 * 
	 * @param plan1	generates first join operand
	 * @param plan2	generates second join operand
	 * @return
	 */
	static BitSet joinRel(ProbePlan plan1, ProbePlan plan2) {
		BitSet rel = new BitSet();
		rel.or(plan1.resultRel);
		rel.or(plan2.resultRel);
		return rel;
	}
	@Override
	public boolean findRel(BitSet rel) {
		if (this.resultRel.equals(rel)) {
			return true;
		} else {
			return leftPlan.findRel(rel) ||
					rightPlan.findRel(rel);
		}
	}
}